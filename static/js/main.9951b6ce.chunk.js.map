{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preperedGoods","sort","good1","good2","localeCompare","includes","length","reverse","getPreparedGoods","SORT_BY_NAME","SORT_BY_LENGTH","resetButton","type","className","onClick","handleClasses","property","cn","prevReverse","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA0BC,EAA1B,GAA6D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACtCI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,IAAK,aACH,OAAOQ,EAAME,cAAcD,GAC7B,IAAK,SACH,OAAOD,EAAMG,SAAS,KAClB,EACAH,EAAMI,OAASH,EAAMG,OAC3B,QACE,OAAO,MAKXV,GACFI,EAAcO,UAGTP,EAMcQ,CAAiBjB,EACpC,CAAEG,YAAWE,eAETa,EAAe,aACfC,EAAiB,SAajBC,GAAejB,GAAaE,IAChC,wBACEgB,KAAK,SACLC,UAAU,4BACVC,QAbU,WACZnB,EAAa,IACbE,GAAc,IAQd,mBASIkB,EAAgB,SAAAC,GAAQ,MAAK,CACjC,YAAatB,EAAUW,SAASW,KAGlC,OACE,sBAAKH,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWI,IAAG,iBAAkBF,EAAcN,IAC9CK,QAxBc,kBAAMnB,EAAac,IAqBnC,iCAQA,wBACEG,KAAK,SACLC,UAAWI,IAAG,oBAAqBF,EAAcL,IACjDI,QA9BgB,kBAAMnB,EAAae,IA2BrC,4BAQA,wBACEE,KAAK,SACLE,QA9Cc,kBAAMjB,GAAc,SAAAqB,GAAW,OAAKA,MA+ClDL,UAAWI,IAAG,oBAAqB,CACjC,YAAarB,IAJjB,qBAUCe,KAIH,6BACGb,EAAaqB,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC/GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9951b6ce.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods, { sortField, isReversed }) {\n  const preperedGoods = [...goods];\n\n  if (sortField) {\n    preperedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case 'alphabetic':\n          return good1.localeCompare(good2);\n        case 'length':\n          return good1.includes(' ')\n            ? 1\n            : good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preperedGoods.reverse();\n  }\n\n  return preperedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(goodsFromServer,\n    { sortField, isReversed });\n\n  const SORT_BY_NAME = 'alphabetic';\n  const SORT_BY_LENGTH = 'length';\n\n  const toggleReverse = () => setIsReversed(prevReverse => !prevReverse);\n\n  const reset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  const setSortByName = () => setSortField(SORT_BY_NAME);\n\n  const setSortByLength = () => setSortField(SORT_BY_LENGTH);\n\n  const resetButton = (sortField || isReversed) && (\n    <button\n      type=\"button\"\n      className=\"button is-danger is-light\"\n      onClick={reset}\n    >\n      Reset\n    </button>\n  );\n\n  const handleClasses = property => ({\n    'is-light': !sortField.includes(property),\n  });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', handleClasses(SORT_BY_NAME))}\n          onClick={setSortByName}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', handleClasses(SORT_BY_LENGTH))}\n          onClick={setSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={toggleReverse}\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {resetButton}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}